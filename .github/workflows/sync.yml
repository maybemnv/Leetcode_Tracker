name: LeetCode Sync

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:     # Manual trigger
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'main.py'
      - 'requirements.txt'

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create logs and backups directories
        run: |
          mkdir -p logs
          mkdir -p backups
        
      - name: Run LeetCode sync
        env:
          LEETCODE_USERNAME: ${{ secrets.LEETCODE_USERNAME }}
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          LOG_LEVEL: INFO
          LOG_FILE: logs/leetcode_tracker.log
        run: |
          python main.py sync --incremental
          
      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sync-logs-${{ github.run_number }}
          path: logs/
          retention-days: 7
          
      - name: Create backup
        env:
          LEETCODE_USERNAME: ${{ secrets.LEETCODE_USERNAME }}
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          LOG_LEVEL: INFO
        run: |
          python main.py backup --path backups/backup_${{ github.run_number }}.json
        continue-on-error: true
          
      - name: Upload backup as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-${{ github.run_number }}
          path: backups/
          retention-days: 30
          
      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `LeetCode Sync Failed - Run #${{ github.run_number }}`;
            const body = `‚ùå **LeetCode sync failed**
            
            **Run Details:**
            - Run Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Triggered by: ${{ github.event_name }}
            
            **Logs:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            This issue was automatically created by the sync workflow.`;
            
            // Check if there's already an open issue for sync failures
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'sync-failure',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['sync-failure', 'automated']
              });
            } else {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `üîÑ **Another sync failure occurred**
                
                Run #${{ github.run_number }} failed. [View logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            }
            
      - name: Close sync failure issues on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Find and close open sync-failure issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'sync-failure',
              state: 'open'
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `‚úÖ **Sync is now working**
                
                Run #${{ github.run_number }} completed successfully. [View logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                Closing this issue as the sync is working again.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
