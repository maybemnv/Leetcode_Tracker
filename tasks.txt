Language Choice: Python wins for this project
Python is better because:

Google Sheets API has excellent Python support (gspread)
Better libraries for data manipulation (pandas)
Simpler async handling for API calls
More mature scraping/API libraries
Less boilerplate code for this type of automation

TypeScript would add unnecessary complexity here since you don't need a frontend.
Complete Task Breakdown
Phase 1: Setup & Configuration (Day 1)
Task 1.1: Environment Setup

 Create new GitHub repository
 Set up Python virtual environment
 Install dependencies: requests, gspread, oauth2client, python-dotenv
 Create .env file for credentials

Task 1.2: Google Sheets API Setup

 Enable Google Sheets API in Google Cloud Console
 Create service account and download JSON credentials
 Create your tracking spreadsheet in Google Sheets
 Share spreadsheet with service account email
 Test basic connection with Python

Task 1.3: LeetCode API Research

 Analyze LeetCode's GraphQL endpoints using browser dev tools
 Identify required queries for user submissions
 Test API calls with curl/Postman
 Document required headers and parameters

Phase 2: Core Development (Day 2-3)
Task 2.1: LeetCode Data Fetcher

 Build GraphQL query for user profile data
 Build GraphQL query for submission history
 Create LeetCode API client class
 Add error handling and rate limiting
 Test with your username

Task 2.2: Data Processing Module

 Parse LeetCode problem data (title, difficulty, topics)
 Map LeetCode topics to your categories
 Calculate statistics (problems per topic, completion %)
 Handle duplicate submissions
 Create data structures for Google Sheets format

Task 2.3: Google Sheets Integration

 Create Google Sheets client class
 Build functions to read existing data
 Build functions to update/append new data
 Create sheet formatting (headers, colors, formulas)
 Add data validation and cleanup

Phase 3: Business Logic (Day 4)
Task 3.1: Sync Logic

 Compare LeetCode data with existing sheet data
 Identify new solved problems
 Update problem status and timestamps
 Calculate and update topic-wise statistics
 Handle edge cases (re-solved problems, deleted submissions)

Task 3.2: Analytics & Reporting

 Generate topic-wise progress summary
 Calculate solving streaks and patterns
 Add difficulty-wise breakdown
 Create monthly/weekly progress charts data
 Build performance metrics (avg time to solve, etc.)

Phase 4: Automation & Deployment (Day 5)
Task 4.1: Script Organization

 Create main execution script
 Add command-line arguments (manual run, specific date range)
 Implement logging system
 Add configuration file support
 Create requirements.txt

Task 4.2: GitHub Actions Setup

 Create .github/workflows/sync.yml
 Set up scheduled execution (daily at specific time)
 Configure environment secrets
 Add manual trigger option
 Test deployment workflow

Task 4.3: Error Handling & Monitoring

 Add comprehensive error logging
 Implement retry logic for failed API calls
 Set up email/Slack notifications for failures
 Create health check mechanism
 Add data backup functionality

Phase 5: Enhancement & Polish (Day 6)
Task 5.1: Advanced Features

 Add support for LeetCode contests
 Track problem attempt history (not just solved)
 Add premium problem detection
 Implement topic difficulty progression tracking
 Create weekly/monthly summary emails

Task 5.2: Documentation & Maintenance

 Write comprehensive README with setup instructions
 Document API rate limits and best practices
 Create troubleshooting guide
 Add example configurations
 Set up automated dependency updates

Project Structure
leetcode-tracker/
├── src/
│   ├── leetcode_client.py
│   ├── sheets_client.py
│   ├── data_processor.py
│   └── sync_manager.py
├── config/
│   ├── settings.py
│   └── topic_mapping.json
├── .github/workflows/
│   └── sync.yml
├── requirements.txt
├── main.py
└── README.md
Key Technical Decisions
LeetCode API Approach:

Use GraphQL queries (same as LeetCode frontend)
Implement session-based authentication if needed
Cache problem metadata to reduce API calls

Google Sheets Structure:

Sheet 1: Raw problem data
Sheet 2: Topic-wise summary with formulas
Sheet 3: Monthly progress tracking
Sheet 4: Analytics dashboard